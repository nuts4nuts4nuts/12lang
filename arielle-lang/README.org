* AMAL language
** Overview
The premise of the AMAL language, is to wrap Markdown with markup for animations.

Example:

#+begin_src Markdown
  # This is Markdown. (this is a header)

  This is normal Markdown with *italics*, **bold**, etc...

  @(type This is AMAL getting typed out dynamically with *italics*, **bold**, etc...)

  @(type speed:0.5 This is AMAL getting typed out ~ s l o w e r ~ thanks to the overriden speed parameter)
#+end_src

** Background
Arielle has a [[https://www.ariellemcmanus.com][personal website]], mostly for her writing work.
She wanted to put a poem on the front page of the website.
She didn't want the poem to just sit there though, she wanted it to be a spectacle - an event.
She wanted it to look as though she was typing the poem out letter-by-letter for whoever visited the site.

She came to me for advice.
I thought we could accomplish this effect with [[https://www.w3schools.com/css/css3_animations.asp][CSS animations]].
It turned out to be too much of a pain in the butt.
We ended up just recording her typing out the poem, and turning that into a GIF.

Still, the idea has stuck in my head.
Why shouldn't there be an ergonomic way to insert animations into website markup?
Her birthday is coming up, and I always try to make something for her for her birthday.
This would be a cool birthday present.
Thus, the ~AMAL~ language: a language for animated markup.
(In Markdown, for the non-animated parts)

** Design

In ~AMAL~, we just want to pass most text on to the Markdown renderer.
All text that doesn't appear in an ~AMAL~ block: ~@(<name> <args?> <body>)~.
Within an ~AMAL~ block, we treat the first string as the name of the animation to use,
there is an optional argument block, and then there is the body of the text to be animated.

If for some reason you'd like to type ~@(~ without creating an ~AMAL~ block,
you have to prefix it with a backslash, like ~\@(~.
