* Worklog

*This is a working surface and nothing in here should be considered documentation.*

** Parsing
=AMAL= is supposed to be markdown for the static parts, and use a custom syntax for the dynamic parts.
How can we accomplish that?

*** Parse markdown and then parse =AMAL=
We could parse markdown to a tree using the existing [[https://docs.racket-lang.org/markdown/][Racket markdown]] reader, and then re-parse the parse tree, inserting =AMAL= nodes.

Pros:
1. Split up the parsing steps.
   This allows me to not have to think about markdown syntax in my reader.

Cons:
1. All =AMAL= blocks have to be within markdown blocks?
   It seems like it would get really complicated to try to figure out parsing them across multiple markdown blocks

What do we do about a situation like this:

#+begin_src markdown
  Where I have some markdown **syntax $wiggle{interspersed with** `AMAL`}
#+end_src

What should the parse-tree look like in that situation?

What does markdown do about similar situations?
Seems like it doesn't really work:

#+begin_src racket
  ;; Putting markup entirely within other markup works fine
  tokenizer.rkt/test> (define xs (parse-markdown "How do we handle *interspersed **text in** here?*"))
  tokenizer.rkt/test> xs
  '((p
     ()
     "How do we handle "
     (em () "interspersed " (strong () "text in") " here?")))

  ;; But interspersed markup is messed up
  tokenizer.rkt/test> (define xs (parse-markdown "How do we handle *interspersed __text* in__ here?"))
  tokenizer.rkt/test> xs
  '((p
     ()
     "How do we handle *interspersed "
     (strong () "text* in")
     " here?"))
#+end_src

I also tested on [[https://markdownlivepreview.com/]], with the same results. So maybe we just say it isn't possible in =AMAL=? 

In that case we could [[*Parse markdown and then parse =arielle=][Parse markdown and then parse AMAL]].
That's still kind of nasty though, right?
We'd rather not parse twice if we can help it.

We can't go all the way [[https://github.com/nuts4nuts4nuts/12lang/tree/main/beautiful_racket/jsonic-lang][jsonic]] because =jsonic= compiled to json.
We want to compile to HTML, not markdown.

*** /Compile AMAL to markdown/, then compile markdown

Okay, we still don't love two passes of parsing, but I'm on a very limited schedule here.
What if we compile =AMAL= to markdown, replacing the =AMAL= markup with HTML and associated CSS, and then pass that on to be compiled as markdown?
This lets us mostly do the =jsonic= thing, where we just pass along every character that's not relevant to =AMAL= markup.
HTML /should/ pass through markdown. Let's test that here to be sure.

#+begin_src racket
  > (define xs (parse-markdown "How does markdown handle *inline <a href='https://www.w3schools.com/html/'>HTML</a>, huh?*"))

  > xs
  
  '((p () "How does markdown handle " (em () "inline " (a ((href "https://www.w3schools.com/html/")) "HTML") ", huh?")))
#+end_src

Wow, it converts it to xexpressions! That makes sense.
Going a little further and rendering it to HTML gives us:

#+begin_src racket
  > (display-xexpr `(html () (head ()) (body () ,@xs)))

  <html>
    <head></head>
    <body>
      <p>
	How does markdown handle <em>inline <a href="https://www.w3schools.com/html/">HTML</a>, huh?</em>
      </p>
    </body>
  </html>
#+end_src

Looks good! How about markdown within an HTML element?

#+begin_src racket
  > (define xs (parse-markdown "How does markdown handle *inline <a href='https://www.w3schools.com/html/'>__HTML__</a>, huh?*"))

  > xs

  '((p () "How does markdown handle " (em () "inline " (a ((href "https://www.w3schools.com/html/")) (strong () "HTML")) ", huh?")))
  
  > (display-xexpr `(html () (head ()) (body () ,@xs)))

  <html>
    <head></head>
    <body>
      <p>How does markdown handle <em>inline <a href="https://www.w3schools.com/html/"><strong>HTML</strong></a>, huh?</em>
      </p>
    </body>
  </html>
#+end_src

Just as we'd expect!
Let's go with this method.

*** What lives in the tokenizer, what lives in the parser?
We are going to compile =AMAL= to html, then pass it along to get compiled as markdown.
Given that design, how do we divide the work between the tokenizer and the parser?

We really only care about identifying =AMAL= expressions.
Everything else can just get passed along.
But is there a problem if we mis-tokenize parts of =AMAL= expressions out of context?
For instance, let's say our grammar is this:

#+begin_src racket
  #lang brag
  a-program : (a-char | a-expr)*
  a-char : CHAR
  a-expr : a-expr-name [a-expr-args] a-expr-body
  a-expr-name : EXPR-NAME
  a-expr-args : "(" [EXPR-KEY ":" EXPR-VALUE ","]* EXPR-KEY ":" EXPR-VALUE ")"
  a-expr-body : EXPR-BODY
#+end_src

- How do we differentiate =EXPR-NAME= from =EXPR-KEY= in the tokenizer?
- Should =EXPR-VALUE= be typed some how (uh oh)?

What if we just tokenize everything into whitespace delimited strings.
Then all of the =EXPR-<whatever>= become =WORD=

#+begin_src racket
  #lang brag
  a-program : (a-char | a-expr)*
  a-char : CHAR
  a-expr : a-expr-name [a-expr-args] a-expr-body
  a-expr-name : "$" WORD
  a-expr-args : "(" [a-arg-key ":" a-arg-value ","]* a-arg-key ":" a-arg-value ")"
  a-arg-key : WORD
  a-arg-value : WORD
  a-expr-body : "{" WORD+ "}"
#+end_src

This kind of makes sense right?
We still have the problem where a-arg-value should probably be typed or something, but that sounds like a problem for a future language update.

Wait then we have a problem with what all of the symbols get lexed as...
I guess they can just get lexed literally and passed on to markdown if they're not part of an =AMAL= expression.

Ugh... it's not working.

Really all I want to do is expand =AMAL= expressions within markdown and add the associated animation styles to the top of the string.
That's all!
What's the simplest way to do that?

Ultimately what do we want the parse tree to look like?
Maybe something like this:

#+begin_src racket
  (a-program (a-markdown "<STUFF>")
	     (a-expr (a-expr-name "<name>")
		     (a-expr-args (a-arg-key "<key>")
				  (a-arg-value "<value>")
				  ...)
		     (a-expr-body "<STUFF>"))
	     (a-markdown "<MORE STUFF>"))
#+end_src

But how do we differentiate the stuff within the =AMAL= blocks from stuff in markdown blocks?
If I wasn't trying to model this as a /"language"/ I would know how to do it...
Maybe I just handle the =AMAL= parsing in the expander.
Is that crazy?
Maybe not.
That way we really can do it like jsonic, but we just have to actually handle the =AMAL= expressions instead of letting racket handle them.

I spent some more time trying to actually parse this into usable stuff.
Let's stop.
Full jsonic, all the way.

Oh yeah, that doesn't let us nest expressions............................................
What am I going to do?

Idea I had this morning:

- Use mirrored delimiters
- Tokenize to delimiters and words
- Require escapes for literal delimiters

Obviously I've thought this before, but I think this would work!
At the expense of breaking existing markdown with unescaped delimiters but whatever.
I have to finish the damn parser...

WHAT THE FUCK DOES "ENCOUNTERED PARSING ERROR" MEAN!?!?!?!??!?!?!?!?

Guess my whitespace was wrong in the parser...

Note to self: comment out the real parse rule attempt and build up the rule incrementally to debug

I think I can make a programming language out of this!

** Expansion
So we need to implement these macros:

- a-program
- a-expr
- a-expr-name
- a-expr-args
- a-expr-body
- a-escaped-at
- a-word
- a-whitespace
- a-colon

(/NOT/ a-at, a-arg-key, or a-arg-value. All of those are pruned from the parse tree)

**** a-colon, a-whitespace, a-word
These are all just passed along literally for markdown parsing

*-> actually I can parse all of these to a-literal!!*

**** a-escaped-at
This becomes an =@= and then is passed along literally

**** a-expr
This is the meat of the language.

We have to:

1. Place the keyframes definition named =a-expr-name= for the animation at the top of the file in a =style= block
2. Wrap =a-expr-body= in some block element that uses the animation
3. Change any args supplied in =a-expr-args=

***** a-expr-name
We try to map this to the library of animations.
Hopefully throw a helpful error if it can't be mapped.

***** a-expr-args
We need to map these either to arguments for the animation in the HTML element,
or arguments in the keyframes (if that's possible) and change the default values to
the passed values.

***** a-expr-body
I don't know if this does anything...

**** a-program
I guess this runs the markdown parser and prints the whole thing as HTML?
